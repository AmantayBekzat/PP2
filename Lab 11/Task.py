import psycopg2
import csv
import os

conn = psycopg2.connect(
    database="postgres",
    user="postgres",
    password="1111",
    host="localhost",
    port="5432"
)

cur = conn.cursor()

def check_table_exists():
    try:
        cur.execute("SELECT to_regclass('public.contacts');")
        result = cur.fetchone()[0]
        if result is None:
            print("–ö–µ—Å—Ç–µ –∂–æ“õ, –æ–Ω—ã –∂–∞—Å–∞—É –∫–µ—Ä–µ–∫.")
            cur.execute("""
                CREATE TABLE contacts (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100),
                    phone VARCHAR(20)
                );
            """)
            conn.commit()
            print("–ö–µ—Å—Ç–µ –∂–∞—Å–∞–ª–¥—ã.")
        else:
            print("–ö–µ—Å—Ç–µ –±–∞—Ä.")
    except Exception as e:
        print(f"“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")
        conn.rollback()

def insert_from_csv(file_path):
    try:
        with open(file_path, 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) == 2:
                    cur.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (row[0], row[1]))
                else:
                    print(f"–ï—Å–∫–µ—Ä—Ç—É: {row} –∂–æ–ª—ã –¥“±—Ä—ã—Å –µ–º–µ—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞.")
            conn.commit()
            print("üì• CSV –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ—Å—ã–ª–¥—ã.")
    except Exception as e:
        print(f"“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")
        conn.rollback()

def insert_from_input():
    try:
        name = input("–ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑: ")
        phone = input("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ: ")
        cur.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (name, phone))
        conn.commit()
        print("‚úÖ –ñ–∞“£–∞ –∫–æ–Ω—Ç–∞–∫—Ç “õ–æ—Å—ã–ª–¥—ã.")
    except Exception as e:
        print(f"“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")
        conn.rollback()

def update_contact():
    try:
        contact_id = input("“ö–∞–π ID –∂–∞“£–∞—Ä—Ç–∞—Å—ã“£? ")
        new_name = input("–ñ–∞“£–∞ –∞—Ç—ã: ")
        new_phone = input("–ñ–∞“£–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        cur.execute("UPDATE contacts SET name = %s, phone = %s WHERE id = %s", (new_name, new_phone, contact_id))
        conn.commit()
        print("‚ôªÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã.")
    except Exception as e:
        print(f"“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")
        conn.rollback()

def query_with_filter():
    try:
        keyword = input("–ê—Ç—ã –Ω–µ –Ω–æ–º–µ—Ä –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ: ")
        cur.execute("SELECT * FROM contacts WHERE name ILIKE %s OR phone ILIKE %s", (f'%{keyword}%', f'%{keyword}%'))
        rows = cur.fetchall()
        if rows:
            for row in rows:
                print(row)
        else:
            print("–ú”ô–ª—ñ–º–µ—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    except Exception as e:
        print(f"“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")

def delete_contact():
    try:
        contact_id = input("“ö–∞–π ID ”©—à—ñ—Ä–≥—ñ“£ –∫–µ–ª–µ–¥—ñ? ")
        cur.execute("DELETE FROM contacts WHERE id = %s", (contact_id,))
        conn.commit()
        print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç ”©—à—ñ—Ä—ñ–ª–¥—ñ.")
    except Exception as e:
        print(f"“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã: {e}")
        conn.rollback()

def menu():
    run = True
    check_table_exists()

    while run:
        print("\nüì± PHONEBOOK MENU:")
        print("1 - insert csv")
        print("2 - from input")
        print("3 - update contact")
        print("4 - query with filter")
        print("5 - delete contact")
        print("6 - break")

        choice = input("–¢–∞“£–¥–∞“£—ã–∑ (1‚Äì6): ")

        if choice == '1':
            file_path = input("CSV —Ñ–∞–π–ª–¥—ã“£ —Ç–æ–ª—ã“õ –∂–æ–ª—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑: ")
            insert_from_csv(file_path)
        elif choice == '2':
            insert_from_input()
        elif choice == '3':
            update_contact()
        elif choice == '4':
            query_with_filter()
        elif choice == '5':
            delete_contact()
        elif choice == '6':
            run = False
        else:
            print("‚ùó “ö–∞—Ç–µ —Ç–∞“£–¥–∞—É.")

menu()
cur.close()
conn.close()
